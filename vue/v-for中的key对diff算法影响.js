/**
 * v-for 中 key 的作用:
 * 
 * 使用 v-for 更新已渲染的元素列表时, 列表数据修改的时候, 他会根据 key 值去判断某个值是否修改, 
 * 
 * 如果修改, 则重新渲染这一项, 否则复用之前的元素.
 * 
 */




/**
 * 避免使用 index 作为 key：
 * 
 * 这是很常见的一种写法：
 */
<div v-for="(item, index) in list" :key="index" >{{item.name}}</div>

/**
 * 但是当列表更新时 会有两种情况：
 * 
 * 1.从列表末尾新增一条数据。
 * 
 * 2.从列表中间插入一条数据。
 * 
 * 
 * 如果是情景一：那更新起来没有问题。
 * 
 * 如果是情景二：因为 diff 算法是根据 key 来进行比照更新的，那么如果我们中间插入一条数据就会改变这条数据后面所有数据的 index ;
 * 
 * 那么就只有插入这条数据之前的列表可以被复用，那这样更新 dom 复用的效率就不会那么高。
 * 
 * 最好的办法是给 key 绑定一个此条数据不会变的一个属性，比如 id。
 */